package filmorate;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
/*
 storage - перенос логики из контроллеров
 service - реализация лайков, друзей, других взаимодействий пользователь - пользователь и пользователь - фильм
 dependencies - настроить спринговые зависимости через аннотации
 endpoints - добавить в контролееры эндпоинты на все действия
 exceptionHandler - настроить обработку ошибок
 
 Интерфейсы FilmStorage и UserStorage, в которых будут определены методы добавления, удаления и модификации объектов.
 Классы InMemoryFilmStorage и InMemoryUserStorage, имплементирующие новые интерфейсы, и перенесите туда
 всю логику хранения, обновления и поиска объектов.
 Добавьте к InMemoryFilmStorage и InMemoryUserStorage аннотацию @Component, чтобы впоследствии пользоваться
 внедрением зависимостей и передавать хранилища сервисам.
 (Перенести логику из контроллеров, оставить в контроллерах только эндпоинты)

 Создайте UserService, добавление в друзья, удаление из друзей, вывод списка общих друзей.
 Пока пользователям не надо одобрять заявки в друзья — добавляем сразу.
 То есть если Лена стала другом Саши, то это значит, что Саша теперь друг Лены.
 Например, можно создать свойство friends в классе пользователя, которое будет содержать список его друзей. Вы можете
 использовать такое решение или придумать своё. Для того чтобы обеспечить уникальность значения (мы не можем добавить
 одного человека в друзья дважды), проще всего использовать для хранения Set<Long> c id друзей.

 Создайте FilmService, операции с фильмами, — добавление и удаление лайка, вывод 10 наиболее популярных фильмов
 по количеству лайков. Пусть пока каждый пользователь может поставить лайк фильму только один раз.
 Добавьте к ним аннотацию @Service — тогда к ним можно будет получить доступ из контроллера. Можно обеспечить условие
 «один пользователь — один лайк» для оценки фильмов как с друзьями(Set).

 Переделайте код в контроллерах, сервисах и хранилищах под использование внедрения зависимостей.
 Используйте аннотации @Service, @Component, @Autowired. Внедряйте зависимости через конструкторы классов.
 Классы-сервисы должны иметь доступ к классам-хранилищам. Убедитесь, что сервисы зависят от интерфейсов классов-хранилищ
 а не их реализаций. Таким образом в будущем будет проще добавлять и использовать новые реализации с другим типом
 хранения данных. Сервисы должны быть внедрены в соответствующие контроллеры.

 @Component — аннотация, которая определяет класс как управляемый Spring. Такой класс будет добавлен в контекст
 приложения при сканировании. @Service не отличается по поведению, но обозначает более узкий спектр классов — такие,
 которые содержат в себе бизнес-логику и, как правило, не хранят состояние.

 С помощью аннотации @PathVariable добавьте возможность получать каждый фильм и данные о пользователях по их
 уникальному идентификатору: GET .../users/{id}.
 Добавьте методы, позволяющие пользователям добавлять друг друга в друзья, получать список общих друзей и лайкать фильмы.
 Проверьте, что все они работают корректно.
 PUT /users/{id}/friends/{friendId} — добавление в друзья.
 DELETE /users/{id}/friends/{friendId} — удаление из друзей.
 GET /users/{id}/friends — возвращаем список пользователей, являющихся его друзьями.
 GET /users/{id}/friends/common/{otherId} — список друзей, общих с другим пользователем.
 PUT /films/{id}/like/{userId} — пользователь ставит лайк фильму.
 DELETE /films/{id}/like/{userId} — пользователь удаляет лайк.
 GET /films/popular?count={count} — возвращает список из первых count фильмов по количеству лайков. Если значение
 параметра count не задано, верните первые 10.
 Убедитесь, что ваше приложение возвращает корректные HTTP-коды.
 400 — если ошибка валидации: ValidationException;
 404 — для всех ситуаций, если искомый объект не найден;
 500 — если возникло исключение.

 Настройте ExceptionHandler для централизованной обработки ошибок.

 
 */

@SpringBootApplication
public class FilmorateApplication {

	public static void main(String[] args) {
		SpringApplication.run(FilmorateApplication.class, args);
	}

}
